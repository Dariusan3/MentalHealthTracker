@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Identity
@using MentalHealthTracker.Models
@using System.Security.Claims
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            @* Folosim RouteView standard și lăsăm paginile individuale să gestioneze autorizarea *@
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <PageTitle>Pagină negăsită</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Ne pare rău, nu există nicio pagină la această adresă.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Permite circuitului Blazor să se inițializeze și să randeze componenta inițială
        await Task.Yield();

        // Am eliminat logica complexă de verificare a utilizatorului în baza de date și deconectare de aici.
        // Ne bazăm pe comportamentul implicit al sistemului de autentificare
        // și pe atributul [Authorize] de pe paginile individuale.

        // Configurăm interceptorul pentru cereri HTTP (dacă este încă necesar)
        try
        {
             await JSRuntime.InvokeVoidAsync("configureHttpInterceptor");
        }
        catch (Exception ex)
        {
             Console.WriteLine($"Eroare la configurarea interceptorului HTTP în App.razor: {ex.Message}");
        }
    }
    
    // Logica OnAfterRenderAsync poate fi păstrată dacă este necesară pentru sincronizarea JS inițială.
}
