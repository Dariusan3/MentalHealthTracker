@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Http
@inject NavigationManager NavigationManager

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p class="alert alert-danger">Nu aveți permisiunea de a accesa această resursă.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <div class="d-flex justify-content-center mt-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Se verifică autorizarea...</span>
                        </div>
                    </div>
                </Authorizing>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Pagină negăsită</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Ne pare rău, nu există nicio pagină la această adresă.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        // Verificăm starea de autentificare la inițializarea aplicației
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        var userName = authState.User.Identity?.Name ?? "";
        
        Console.WriteLine($"App.razor OnInitializedAsync: Autentificat: {isAuthenticated}, Utilizator: {userName}");
        
        // Configurăm interceptorul pentru cereri HTTP
        await JSRuntime.InvokeVoidAsync("configureHttpInterceptor");
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Verificăm starea de autentificare la încărcarea aplicației
                await JSRuntime.InvokeVoidAsync("checkAuthStatus");
                
                Console.WriteLine("App.razor: Verificare autentificare efectuată");
                
                // Sincronizăm starea de autentificare din localStorage
                await JSRuntime.InvokeVoidAsync("syncAuthStateFromLocalStorage");
                Console.WriteLine("App.razor: Sincronizare autentificare din localStorage efectuată");
                
                // Forțăm revalidarea stării de autentificare
                if (AuthStateProvider is MentalHealthTracker.Areas.Identity.RevalidatingIdentityAuthenticationStateProvider<MentalHealthTracker.Models.ApplicationUser> revalidatingProvider)
                {
                    revalidatingProvider.ForceRevalidate();
                    Console.WriteLine("App.razor: Forțare revalidare stare autentificare");
                }
                
                // Verificăm starea de autentificare după sincronizare
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
                var userName = authState.User.Identity?.Name ?? "";
                
                Console.WriteLine($"OnAfterRenderAsync: Autentificat: {isAuthenticated}, Utilizator: {userName}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"App.razor: Eroare la verificarea autentificării: {ex.Message}");
            }
        }
    }
}
