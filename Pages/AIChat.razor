@page "/aichat"
@using MentalHealthTracker.Services
@using MentalHealthTracker.Models
@using MudBlazor
@inject AIChatService AIChatService
@inject ChatHistoryService ChatHistoryService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject ISnackbar Snackbar
@inject IServiceProvider ServiceProvider

<PageTitle>Chat AI</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h4">Chat cu AI (local)</MudText>
        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Error" 
                      StartIcon="@Icons.Material.Filled.Delete"
                      OnClick="OpenDeleteDialog"
                      Disabled="@(Conversations.Count == 0)">
                Șterge conversația
            </MudButton>
            <MudButton Variant="Variant.Outlined" 
                      Color="Color.Primary" 
                      StartIcon="@Icons.Material.Filled.Add"
                      OnClick="CreateNewChat">
                Conversație nouă
            </MudButton>
        </div>
    </div>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" Class="mb-4" @bind-ActivePanelIndex="ActiveTabIndex">
        @foreach (var conversation in Conversations)
        {
            <MudTabPanel Text="@conversation.Title" Icon="@Icons.Material.Filled.Chat">
                <MudPaper Elevation="2" Class="pa-4" Style="min-height: 400px;">
                    <div style="overflow-y:auto; max-height:400px;" class="mb-4">
                        @foreach (var msg in conversation.Messages.OrderBy(m => m.Timestamp))
                        {
                            <MudPaper Elevation="0" 
                                     Class="@GetMessageClass(msg.Role)" 
                                     Style="border-radius: 8px; margin-bottom: 8px; padding: 12px;">
                                <div class="d-flex align-center mb-2">
                                    <MudIcon Icon="@(msg.Role == "user" ? Icons.Material.Filled.Person : Icons.Material.Filled.SmartToy)" 
                                            Color="@(msg.Role == "user" ? Color.Primary : Color.Secondary)"
                                            Class="mr-2" />
                                    <MudText Typo="Typo.body1" 
                                            Color="@(msg.Role == "user" ? Color.Primary : Color.Secondary)">
                                        <b>@(msg.Role == "user" ? "Tu:" : "AI:")</b>
                                    </MudText>
                                    <MudText Typo="Typo.caption" Class="ml-auto" Color="Color.Secondary">
                                        @msg.Timestamp.ToLocalTime().ToString("HH:mm")
                                    </MudText>
                                </div>
                                <MudText Typo="Typo.body1" Class="ml-6" Style="white-space: pre-wrap;">@msg.Content</MudText>
                            </MudPaper>
                        }
                    </div>
                    <MudDivider Class="my-2" />
                    <div class="d-flex gap-2">
                        <MudTextField @bind-Value="UserInput" 
                                    Placeholder="Scrie un mesaj..." 
                                    FullWidth="true" 
                                    OnKeyDown="OnKeyDown" 
                                    Disabled="@IsStreaming"
                                    Variant="Variant.Outlined"
                                    Class="flex-grow-1" />
                        <MudButton OnClick="SendMessage" 
                                 Disabled="@DisabledButton" 
                                 Variant="Variant.Filled" 
                                 Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.Send">
                            Trimite
                        </MudButton>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <MudAlert Severity="Severity.Warning" Class="mt-3">
                            @ErrorMessage
                            @if (ErrorMessage.Contains("limita zilnică"))
                            {
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="GoToSubscription" Class="ml-2">
                                    Abonează-te acum
                                </MudButton>
                            }
                        </MudAlert>
                    }
                </MudPaper>
            </MudTabPanel>
        }
    </MudTabs>
</MudContainer>

<MudDialog @bind-IsVisible="ShowDeleteDialog" Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Ștergere conversație</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Sigur doriți să ștergeți conversația curentă?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDeleteDialog">Anulează</MudButton>
        <MudButton Color="Color.Error" OnClick="DeleteCurrentChat">Șterge</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<ChatConversation> Conversations = new();
    private string UserInput = string.Empty;
    private bool IsStreaming = false;
    private string CurrentStreaming = string.Empty;
    private string Response = string.Empty;
    private string ErrorMessage = string.Empty;
    private bool ShowDeleteDialog = false;
    private int ActiveTabIndex = 0;

    private DialogOptions dialogOptions = new()
    {
        CloseButton = true,
        MaxWidth = MaxWidth.ExtraSmall,
        FullWidth = true
    };

    private bool DisabledButton => IsStreaming || string.IsNullOrWhiteSpace(UserInput);

    private string GetMessageClass(string role)
    {
        return role == "user" 
            ? "pa-2 bg-primary-lighten" 
            : "pa-2 bg-secondary-lighten";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadConversations();
            await NotificationService.StartAsync();
            NotificationService.OnNotificationReceived += ShowNotification;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la inițializare: {ex.Message}");
            Snackbar.Add("A apărut o eroare la încărcarea conversațiilor", Severity.Error);
        }
    }

    private async Task LoadConversations()
    {
        try
        {
            Conversations = await ChatHistoryService.GetUserConversationsAsync();
            
            // Încarcă mesajele pentru fiecare conversație
            foreach (var conversation in Conversations)
            {
                var fullConversation = await ChatHistoryService.GetConversationWithMessagesAsync(conversation.Id);
                if (fullConversation != null)
                {
                    conversation.Messages = fullConversation.Messages;
                }
            }

            if (Conversations.Count == 0)
            {
                await CreateNewChat();
            }
            else
            {
                // Selectează ultima conversație activă
                ActiveTabIndex = 0;
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Eroare la încărcarea conversațiilor: {ex.Message}");
            Snackbar.Add("A apărut o eroare la încărcarea conversațiilor", Severity.Error);
        }
    }

    private async Task CreateNewChat()
    {
        var conversation = await ChatHistoryService.CreateNewConversationAsync();
        Conversations.Add(conversation);
        ActiveTabIndex = Conversations.Count - 1;
        StateHasChanged();
    }

    private void OpenDeleteDialog()
    {
        ShowDeleteDialog = true;
    }

    private void CloseDeleteDialog()
    {
        ShowDeleteDialog = false;
    }

    private async Task DeleteCurrentChat()
    {
        try
        {
            if (Conversations.Count > 0)
            {
                var conversationToDelete = Conversations[ActiveTabIndex];
                await ChatHistoryService.DeleteConversationAsync(conversationToDelete.Id);
                Conversations.RemoveAt(ActiveTabIndex);
                
                if (Conversations.Count == 0)
                {
                    await CreateNewChat();
                }
                else
                {
                    ActiveTabIndex = Math.Min(ActiveTabIndex, Conversations.Count - 1);
                }
                
                Snackbar.Add("Conversația a fost ștearsă cu succes", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("A apărut o eroare la ștergerea conversației", Severity.Error);
            Console.WriteLine($"Eroare la ștergerea conversației: {ex.Message}");
        }
        finally
        {
            CloseDeleteDialog();
            StateHasChanged();
        }
    }

    private void ShowNotification(string message)
    {
        Snackbar.Add(message, Severity.Success);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserInput)) return;

        var currentConversation = Conversations[ActiveTabIndex];
        if (currentConversation == null) return;

        // Verifică dacă utilizatorul poate trimite un mesaj
        var (isAllowed, errorMessage) = await ChatHistoryService.CanUserSendMessageAsync();
        if (!isAllowed)
        {
            ErrorMessage = errorMessage;
            return;
        }

        ErrorMessage = string.Empty;

        // Salvează mesajul userului
        await ChatHistoryService.AddMessageToConversationAsync(currentConversation.Id, "user", UserInput);

        var localInput = UserInput;
        UserInput = string.Empty;
        IsStreaming = true;
        CurrentStreaming = string.Empty;

        // Obține răspunsul AI
        Response = await AIChatService.GetChatResponseOllamaAsync(localInput, ServiceProvider);

        // Salvează răspunsul AI
        await ChatHistoryService.AddMessageToConversationAsync(currentConversation.Id, "assistant", Response);

        // Reîncarcă conversația pentru a afișa noile mesaje
        var updatedConversation = await ChatHistoryService.GetConversationWithMessagesAsync(currentConversation.Id);
        if (updatedConversation != null)
        {
            Conversations[ActiveTabIndex] = updatedConversation;
        }

        IsStreaming = false;
        StateHasChanged();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !IsStreaming)
        {
            await SendMessage();
        }
    }

    private void GoToSubscription()
    {
        NavigationManager.NavigateTo("/subscription");
    }

    public void Dispose()
    {
        if (NotificationService != null)
        {
            NotificationService.OnNotificationReceived -= ShowNotification;
        }
    }
}
