@page "/payment/success"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazor

<PageTitle>Plată reușită</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="d-flex justify-center align-center" Style="min-height: 80vh;">
    <MudCard Elevation="8" Class="p-6 rounded-xl text-center animate__animated animate__fadeInUp" Style="max-width: 500px; width: 100%;">
        <MudCardContent>
            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                <MudText Typo="Typo.h6" Class="mt-4">Se procesează plata...</MudText>
            }
            else if (isError)
            {
                <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" Size="Size.Large" Class="mb-2" />
                <MudText Typo="Typo.h6" Color="Color.Error" Class="mb-4">@errorMessage</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoToSubscription" Class="mt-4">
                    Încearcă din nou
                </MudButton>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Color="Color.Warning" Size="Size.Large" Class="mb-2 animate__animated animate__tada" />
                <MudChip Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Star" Class="mb-3" Style="font-size:1.2rem;">Premium activat!</MudChip>
                <MudText Typo="Typo.h4" Color="Color.Success" Class="mb-2">Plată procesată cu succes!</MudText>
                <MudText Typo="Typo.h6" Class="mb-2">Îți mulțumim pentru abonare la planul <b>Premium</b>!</MudText>
                <MudText Typo="Typo.body1" Class="mb-2">Acum te poți bucura de <b>conversații nelimitate</b> cu chatbot-ul nostru.</MudText>
                <MudDivider Class="my-3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" OnClick="GoToChat" Class="me-2" StartIcon="@Icons.Material.Filled.Chat">Începe să conversezi</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Size="Size.Large" OnClick="GoToHome" StartIcon="@Icons.Material.Filled.Home">Înapoi la pagina principală</MudButton>
                <MudText Typo="Typo.caption" Class="mt-4 d-block" Color="Color.Info">
                    <MudIcon Icon="@Icons.Material.Filled.ReceiptLong" Size="Size.Medium" Class="me-1" />Număr tranzacție: <b>@sessionId</b>
                </MudText>
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

<MudSnackbarProvider />

@code {
    private string sessionId = string.Empty;
    private bool isLoading = true;
    private bool isError = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("session_id", out var sessionIdValue))
        {
            sessionId = sessionIdValue;
            await VerifyPayment();
        }
        else
        {
            isError = true;
            errorMessage = "Nu s-a putut găsi ID-ul sesiunii de plată.";
            isLoading = false;
        }
    }

    private async Task VerifyPayment()
    {
        try
        {
            var response = await Http.PostAsync($"api/payment/verify-session/{sessionId}", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<VerifyResponse>();
                if (result?.Success == true)
                {
                    await JSRuntime.InvokeVoidAsync("eval", "if(window.confetti){window.confetti()};");
                }
                else
                {
                    isError = true;
                    errorMessage = result?.Message ?? "Nu s-a putut verifica plata.";
                }
            }
            else
            {
                isError = true;
                errorMessage = "Eroare la verificarea plății.";
            }
        }
        catch (Exception ex)
        {
            isError = true;
            errorMessage = $"Eroare: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToChat()
    {
        NavigationManager.NavigateTo("/aichat");
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    private void GoToSubscription()
    {
        NavigationManager.NavigateTo("/subscription");
    }

    private class VerifyResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
    }
} 