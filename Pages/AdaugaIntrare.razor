@page "/adauga-intrare"
@using MentalHealthTracker.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using MudBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Mental Health Tracker - Adaugă înregistrare</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudPaper Class="pa-4" Elevation="3">
        <MudText Typo="Typo.h4" Class="mb-4">Adaugă o nouă înregistrare</MudText>

        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12">
                    <MudDatePicker Date="@entry.Date"
                                 DateChanged="@(date => entry.Date = date ?? DateTime.Now)"
                                 Label="Data" 
                                 Required="true"
                                 RequiredError="Data este obligatorie"
                                 Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="entry.MoodLevel" 
                                   Label="Stare de spirit (1-10)" 
                                   Min="1" 
                                   Max="10" 
                                   Required="true"
                                   RequiredError="Starea de spirit este obligatorie"
                                   Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="entry.Activities" 
                                Label="Activități" 
                                Required="true"
                                RequiredError="Activitățile sunt obligatorii"
                                Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="entry.Triggers" 
                                Label="Factori declanșatori" 
                                Required="true"
                                RequiredError="Factorii declanșatori sunt obligatorii"
                                Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="entry.SleepHours" 
                                   Label="Ore de somn" 
                                   Min="0" 
                                   Max="24" 
                                   Required="true"
                                   RequiredError="Orele de somn sunt obligatorii"
                                   Class="mt-0" />
                </MudItem>

                <MudItem xs="12" Class="d-flex justify-space-between mt-4">
                    <MudButton Variant="Variant.Outlined" 
                              Color="Color.Secondary"
                              OnClick="@(() => NavigationManager.NavigateTo("/jurnal"))"
                              Disabled="@isLoading">
                        Anulează
                    </MudButton>
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary"
                              OnClick="SaveEntry"
                              Disabled="@(!success || isLoading)">
                        @if (isLoading)
                        {
                            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        }
                        Salvează
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MoodEntry entry = new();
    private MudForm? form;
    private bool success;
    private bool isLoading;

    private async Task SaveEntry()
    {
        try
        {
            if (!success)
            {
                Snackbar.Add("Vă rugăm să completați toate câmpurile obligatorii", Severity.Warning);
                return;
            }

            // Validare suplimentară
            if (entry.Date == default)
            {
                Snackbar.Add("Data este obligatorie", Severity.Warning);
                return;
            }

            if (entry.MoodLevel < 1 || entry.MoodLevel > 10)
            {
                Snackbar.Add("Starea de spirit trebuie să fie între 1 și 10", Severity.Warning);
                return;
            }

            if (string.IsNullOrWhiteSpace(entry.Activities))
            {
                Snackbar.Add("Activitățile sunt obligatorii", Severity.Warning);
                return;
            }

            if (string.IsNullOrWhiteSpace(entry.Triggers))
            {
                Snackbar.Add("Factorii declanșatori sunt obligatorii", Severity.Warning);
                return;
            }

            if (!entry.SleepHours.HasValue || entry.SleepHours < 0 || entry.SleepHours > 24)
            {
                Snackbar.Add("Orele de somn trebuie să fie între 0 și 24", Severity.Warning);
                return;
            }

            isLoading = true;

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("Nu s-a putut identifica utilizatorul", Severity.Error);
                return;
            }
            
            entry.UserId = userId;
            
            var response = await Http.PostAsJsonAsync("api/MoodEntries", entry);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Înregistrarea a fost adăugată cu succes", Severity.Success);
                NavigationManager.NavigateTo("/jurnal");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Eroare la salvarea înregistrării: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
} 