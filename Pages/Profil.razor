@page "/profil"
@using MudBlazor
@using MudBlazor.Dialog
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@using MentalHealthTracker.Models
@using MentalHealthTracker.Services
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject UserProfileService UserProfileService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ThemeService ThemeService
@attribute [Authorize]

<PageTitle>Mental Health Tracker - Profil</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h3">Profilul meu</MudText>
        <MudButton Variant="Variant.Outlined" 
                  Color="Color.Primary" 
                  StartIcon="@Icons.Material.Filled.ArrowBack"
                  Href="/"
                  Class="ml-auto">
            Înapoi la pagina principală
        </MudButton>
    </div>

    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Informații personale</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (userProfile != null)
                    {
                        <MudTextField @bind-Value="@userProfile.Nume" Label="Nume" Variant="Variant.Outlined" Class="mt-3" />
                        <MudTextField @bind-Value="@userProfile.Email" Label="Email" Variant="Variant.Outlined" Class="mt-3" />
                        <MudDatePicker @bind-Date="@userProfile.DataNasterii" Label="Data nașterii" Variant="Variant.Outlined" Class="mt-3" />
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SalveazaModificari">Salvează modificările</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" sm="6">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Preferințe</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Secondary" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (userProfile != null)
                    {
                        <MudSwitch @bind-Value="@userProfile.NotificariZilnice" Color="Color.Primary" Label="Primește notificări zilnice" Class="mt-3" />
                        <MudSwitch @bind-Value="@userProfile.RapoarteSaptamanale" Color="Color.Primary" Label="Primește rapoarte săptămânale" Class="mt-3" />
                        <MudTimePicker @bind-Time="@userProfile.OraNotificare" Label="Ora notificării zilnice" Variant="Variant.Outlined" Class="mt-3" />
                        <MudSelect T="string" Value="@userProfile.Tema" Label="Tema aplicației" Variant="Variant.Outlined" Class="mt-3" ValueChanged="@OnThemeChangedFromProfile">
                            <MudSelectItem Value='@("light")'>Luminoasă</MudSelectItem>
                            <MudSelectItem Value='@("dark")'>Întunecată</MudSelectItem>
                            <MudSelectItem Value='@("auto")'>Automată (bazată pe setările sistemului)</MudSelectItem>
                        </MudSelect>
                    }
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@SalveazaPreferinte">Salvează preferințele</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" Class="mt-4">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Status abonament</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    @if (currentUser != null && currentUser.IsSubscribed)
                    {
                        <MudChip Color="Color.Warning" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Star" Class="mb-2">Premium</MudChip>
                        <MudText Typo="Typo.h6" Color="Color.Warning">Ai abonament Premium activ!</MudText>
                        <MudText Typo="Typo.body2" Class="mt-1">Te bucuri de conversații nelimitate cu AI și acces la toate funcționalitățile.</MudText>
                    }
                    else if (currentUser != null)
                    {
                        <MudChip Color="Color.Default" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Lock">Gratuit</MudChip>
                        <MudText Typo="Typo.h6" Color="Color.Default">Cont gratuit</MudText>
                        <MudText Typo="Typo.body2" Class="mt-1">Ai acces la 5 mesaje/zi în chat. Pentru acces nelimitat, fă upgrade la Premium!</MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Warning" Href="/subscription" Class="mt-2">Upgrade la Premium</MudButton>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Ți-au mai rămas <strong>@GetMessagesLeftToday()</strong> mesaje pentru astăzi.
                        </MudText>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        
        <MudItem xs="12" Class="mt-4">
            <MudCard Elevation="3" Class="rounded-lg">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Securitate</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIcon Icon="@Icons.Material.Filled.Security" Color="Color.Error" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField T="string" Label="Parola actuală" Variant="Variant.Outlined" InputType="@passwordInputType" Adornment="Adornment.End" AdornmentIcon="@passwordIcon" OnAdornmentClick="@TogglePasswordVisibility" Class="mt-3" @bind-Value="@currentPassword" />
                    <MudTextField T="string" Label="Parola nouă" Variant="Variant.Outlined" InputType="@passwordInputType" Adornment="Adornment.End" AdornmentIcon="@passwordIcon" OnAdornmentClick="@TogglePasswordVisibility" Class="mt-3" @bind-Value="@newPassword" />
                    <MudTextField T="string" Label="Confirmă parola nouă" Variant="Variant.Outlined" InputType="@passwordInputType" Adornment="Adornment.End" AdornmentIcon="@passwordIcon" OnAdornmentClick="@TogglePasswordVisibility" Class="mt-3" @bind-Value="@confirmNewPassword" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@SchimbaParola">Schimbă parola</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private UserProfile? userProfile;
    private ApplicationUser? currentUser;

    private string currentPassword = "";
    private string newPassword = "";
    private string confirmNewPassword = "";

    private bool isPasswordVisible = false;
    private InputType passwordInputType => isPasswordVisible ? InputType.Text : InputType.Password;
    private string passwordIcon => isPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (userId != null)
            {
                // Nu mai verificăm existența utilizatorului în baza de date aici.
                // Aceasta se face la nivel global în App.razor.

                currentUser = await UserManager.FindByIdAsync(userId);

                if (currentUser != null)
                {
                    userProfile = await UserProfileService.GetUserProfileAsync(currentUser.Id);
                    if (userProfile == null)
                    {
                        var nume = (!string.IsNullOrWhiteSpace(currentUser.FirstName) || !string.IsNullOrWhiteSpace(currentUser.LastName))
                            ? $"{currentUser.FirstName} {currentUser.LastName}".Trim()
                            : currentUser.Email ?? "";
                        userProfile = new UserProfile 
                        { 
                            UserId = currentUser.Id, 
                            Nume = nume,
                            Email = currentUser.Email ?? "",
                            DataNasterii = currentUser.DateOfBirth,
                        };
                        await UserProfileService.CreateOrUpdateProfileAsync(userProfile);
                    }

                    // Aplică tema din profil la inițializare
                    if (userProfile.Tema == "dark")
                        ThemeService.SetTheme(true);
                    else if (userProfile.Tema == "light")
                        ThemeService.SetTheme(false);
                }
                else
                {
                     // Acest caz ar trebui gestionat deja de App.razor, dar adăugăm un fallback.
                    Console.WriteLine("Profil.razor: Utilizator autentificat, dar currentUser este null. Redirecționare la login.");
                    NavigationManager.NavigateTo("/account/login", forceLoad: true);
                }
            }
            else
            {
                // Acest caz ar trebui gestionat deja de App.razor, dar adăugăm un fallback.
                Console.WriteLine("Profil.razor: Utilizator autentificat, dar fără ID claim. Redirecționare la login.");
                NavigationManager.NavigateTo("/account/login", forceLoad: true);
            }
        }
        else
        {
            // Utilizatorul nu este autentificat - redirecționare la login
            Console.WriteLine("Profil.razor: Utilizator neautentificat. Redirecționare la login.");
            NavigationManager.NavigateTo("/account/login", forceLoad: true);
        }
    }

    private async Task SalveazaModificari()
    {
        if (userProfile != null)
        {
            userProfile.UltimaActualizare = DateTime.UtcNow;
            await UserProfileService.CreateOrUpdateProfileAsync(userProfile);
            Snackbar.Add("Informații personale salvate cu succes!", Severity.Success);
        }
        else
        {
             Snackbar.Add("Eroare la salvarea informațiilor personale.", Severity.Error);
        }
    }
    
    private async Task OnThemeChangedFromProfile(string value)
    {
        if (userProfile != null)
        {
            userProfile.Tema = value;
            // Nu mai aplicăm tema imediat, se va aplica doar după salvarea preferințelor
        }
    }

    private async Task SalveazaPreferinte()
    {
        if (userProfile != null)
        {
            try
            {
                await UserProfileService.CreateOrUpdateProfileAsync(userProfile);
                
                // Aplicăm tema doar după salvarea preferințelor
                if (userProfile.Tema == "dark")
                    await ThemeService.SetTheme(true);
                else if (userProfile.Tema == "light")
                    await ThemeService.SetTheme(false);
                
                Snackbar.Add("Preferințele au fost salvate cu succes!", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add("Eroare la salvarea preferințelor: " + ex.Message, Severity.Error);
            }
        }
    }
    
    private async Task SchimbaParola()
    {
        if (currentUser == null) return;

        if (string.IsNullOrWhiteSpace(currentPassword) || string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmNewPassword))
        {
            Snackbar.Add("Toate câmpurile parolei sunt obligatorii.", Severity.Warning);
            return;
        }

        if (newPassword != confirmNewPassword)
        {
            Snackbar.Add("Noua parolă și confirmarea parolei nu coincid.", Severity.Warning);
            return;
        }

        var changePasswordResult = await UserManager.ChangePasswordAsync(currentUser, currentPassword, newPassword);

        if (changePasswordResult.Succeeded)
        {
            Snackbar.Add("Parola schimbată cu succes!", Severity.Success);
            currentPassword = string.Empty;
            newPassword = string.Empty;
            confirmNewPassword = string.Empty;
        }
        else
        {
            var errors = string.Join(", ", changePasswordResult.Errors.Select(e => e.Description));
            Snackbar.Add($"Eroare la schimbarea parolei: {errors}", Severity.Error);
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private int GetMessagesLeftToday()
    {
        if (currentUser == null || currentUser.IsSubscribed)
            return 0;
        var azi = DateTime.Today;
        if (currentUser.LastMessageResetDate == null || currentUser.LastMessageResetDate.Value.Date < azi)
            return 5;
        if (currentUser.MessagesLeftToday <= 0)
            return 0;
        return currentUser.MessagesLeftToday;
    }
} 