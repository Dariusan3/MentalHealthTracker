@page "/jurnal"
@using MentalHealthTracker.Models
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using System.Security.Claims
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ISnackbar Snackbar
@attribute [Authorize]

<style>
    .mud-tabs {
        background: var(--mud-palette-surface);
        border-radius: 8px;
        overflow: hidden;
    }

    .mud-tab {
        color: var(--mud-palette-text-primary);
        transition: background-color 0.2s ease;
        background: var(--mud-palette-surface);
    }

    .mud-tab:hover {
        background: var(--mud-palette-background-grey);
    }

    .mud-tab.mud-selected {
        background: var(--mud-palette-primary);
        color: var(--mud-palette-primary-contrast);
    }

    .mud-tab-panel {
        background: var(--mud-palette-surface);
        border-radius: 0 0 8px 8px;
        padding: 1rem;
    }

    .mud-card {
        background: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-divider);
        border-radius: 8px;
    }

    .mud-card-content {
        color: var(--mud-palette-text-primary);
    }

    .mud-text {
        color: var(--mud-palette-text-primary);
    }

    .mud-text-field {
        color: var(--mud-palette-text-primary);
    }

    .mud-text-field-label {
        color: var(--mud-palette-text-primary);
    }

    .mud-text-field-input {
        color: var(--mud-palette-text-primary);
    }

    .mud-text-field-helper-text {
        color: var(--mud-palette-text-secondary);
    }

    .mud-button {
        color: var(--mud-palette-text-primary);
    }

    .mud-button-filled {
        color: var(--mud-palette-primary-contrast);
    }

    .mud-expansion-panel {
        background: var(--mud-palette-surface);
        border: 1px solid var(--mud-palette-divider);
        border-radius: 8px;
        margin-bottom: 1rem;
    }

    .mud-expansion-panel-header {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-expansion-panel-content {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-table {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-table-head {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-table-row {
        color: var(--mud-palette-text-primary);
    }

    .mud-table-cell {
        color: var(--mud-palette-text-primary);
    }

    .mud-table-footer {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-table-toolbar {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-chip {
        color: var(--mud-palette-text-primary);
    }

    .mud-pagination {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-pagination-item {
        color: var(--mud-palette-text-primary);
    }

    .mud-pagination-item-selected {
        background: var(--mud-palette-primary);
        color: var(--mud-palette-primary-contrast);
    }

    .mud-dialog {
        background: var(--mud-palette-surface);
        color: var(--mud-palette-text-primary);
    }

    .mud-dialog-title {
        color: var(--mud-palette-text-primary);
    }

    .mud-dialog-content {
        color: var(--mud-palette-text-primary);
    }

    .mud-dialog-actions {
        background: var(--mud-palette-surface);
    }
</style>

<PageTitle>Mental Health Tracker - Jurnal</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Jurnalul meu</MudText>

    @if (isLoading)
    {
        <div class="d-flex flex-column align-center my-8">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            <MudText Class="mt-4">Se încarcă înregistrările...</MudText>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudPaper Class="pa-4 my-4" Elevation="3">
            <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-3">
                @errorMessage
            </MudAlert>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadEntries">
                Reîncearcă
            </MudButton>
        </MudPaper>
    }
    else
    {
        <MudPaper Class="pa-4" Elevation="3">
            <div class="d-flex justify-space-between align-center mb-4">
                <MudText Typo="Typo.h5">Adaugă o nouă înregistrare</MudText>
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="@(() => showAddDialog = true)"
                          StartIcon="@Icons.Material.Filled.Add">
                    Adaugă
                </MudButton>
            </div>

            <MudDivider Class="my-4" />

            @if (entries == null || !entries.Any())
            {
                <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-3">
                    Nu există înregistrări în jurnal. Adaugă prima ta înregistrare pentru a începe să urmărești starea ta de spirit.
                </MudAlert>
            }
            else
            {
                <MudTable Items="@entries" 
                         Dense="true" 
                         Hover="true" 
                         Bordered="true" 
                         Striped="true"
                         Loading="@isLoading"
                         LoadingProgressColor="Color.Primary"
                         Filter="new Func<MoodEntry,bool>(FilterFunc)"
                         FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
                         @bind-SelectedItem="selectedEntry"
                         MultiSelection="false"
                         FixedHeader="true"
                         Height="400px"
                         Breakpoint="Breakpoint.Sm"
                         RowClassFunc="@((entry, index) => GetRowClass(entry))">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Înregistrări</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" 
                                    Placeholder="Caută..." 
                                    Adornment="Adornment.Start" 
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium" 
                                    Class="mt-0" />
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Data</MudTh>
                        <MudTh>Stare de spirit</MudTh>
                        <MudTh>Activități</MudTh>
                        <MudTh>Factori declanșatori</MudTh>
                        <MudTh>Ore de somn</MudTh>
                        <MudTh>Acțiuni</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Data">@context.Date.ToString("dd.MM.yyyy")</MudTd>
                        <MudTd DataLabel="Stare de spirit">
                            <div class="d-flex align-center">
                                <MudIcon Icon="@GetMoodIcon(context.MoodLevel)" 
                                        Color="@GetMoodColor(context.MoodLevel)" 
                                        Class="mr-2" />
                                @context.MoodLevel / 10
                            </div>
                        </MudTd>
                        <MudTd DataLabel="Activități">@context.Activities</MudTd>
                        <MudTd DataLabel="Factori declanșatori">@context.Triggers</MudTd>
                        <MudTd DataLabel="Ore de somn">@(context.SleepHours?.ToString() ?? "-")</MudTd>
                        <MudTd DataLabel="Acțiuni">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                         Color="Color.Primary" 
                                         Size="Size.Small"
                                         OnClick="@(() => EditEntry(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                         Color="Color.Error" 
                                         Size="Size.Small"
                                         OnClick="@(() => DeleteEntry(context))" />
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudPaper>
    }
</MudContainer>

<MudDialog @bind-IsVisible="showAddDialog" 
           Options="dialogOptions"
           FullWidth="true"
           MaxWidth="MaxWidth.Medium">
    <TitleContent>
        <MudText Typo="Typo.h6">Adaugă o nouă înregistrare</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudGrid>
                <MudItem xs="12">
                    <MudDatePicker Date="@newEntry.Date"
                                 DateChanged="@(date => newEntry.Date = date ?? DateTime.Now)"
                                 Label="Data" 
                                 Required="true"
                                 RequiredError="Data este obligatorie"
                                 Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="newEntry.MoodLevel" 
                                   Label="Stare de spirit (1-10)" 
                                   Min="1" 
                                   Max="10" 
                                   Required="true"
                                   RequiredError="Starea de spirit este obligatorie"
                                   Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="newEntry.Activities" 
                                Label="Activități" 
                                Required="true"
                                RequiredError="Activitățile sunt obligatorii"
                                Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="newEntry.Triggers" 
                                Label="Factori declanșatori" 
                                Required="true"
                                RequiredError="Factorii declanșatori sunt obligatorii"
                                Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="newEntry.SleepHours" 
                                   Label="Ore de somn" 
                                   Min="0" 
                                   Max="24" 
                                   Required="true"
                                   RequiredError="Orele de somn sunt obligatorii"
                                   Class="mt-0" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => showAddDialog = false)">Anulează</MudButton>
        <MudButton Color="Color.Primary" 
                  OnClick="SaveEntry"
                  Disabled="@(!success)">
            Salvează
        </MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="showEditDialog" 
           Options="dialogOptions"
           FullWidth="true"
           MaxWidth="MaxWidth.Medium">
    <TitleContent>
        <MudText Typo="Typo.h6">Editează înregistrarea</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="editForm" @bind-IsValid="@editSuccess">
            <MudGrid>
                <MudItem xs="12">
                    <MudDatePicker Date="@editingEntry.Date"
                                 DateChanged="@(date => editingEntry.Date = date ?? DateTime.Now)"
                                 Label="Data" 
                                 Required="true"
                                 RequiredError="Data este obligatorie"
                                 Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="editingEntry.MoodLevel" 
                                   Label="Stare de spirit (1-10)" 
                                   Min="1" 
                                   Max="10" 
                                   Required="true"
                                   RequiredError="Starea de spirit este obligatorie"
                                   Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="editingEntry.Activities" 
                                Label="Activități" 
                                Required="true"
                                RequiredError="Activitățile sunt obligatorii"
                                Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="editingEntry.Triggers" 
                                Label="Factori declanșatori" 
                                Required="true"
                                RequiredError="Factorii declanșatori sunt obligatorii"
                                Class="mt-0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="editingEntry.SleepHours" 
                                   Label="Ore de somn" 
                                   Min="0" 
                                   Max="24" 
                                   Required="true"
                                   RequiredError="Orele de somn sunt obligatorii"
                                   Class="mt-0" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => showEditDialog = false)">Anulează</MudButton>
        <MudButton Color="Color.Primary" 
                  OnClick="UpdateEntry"
                  Disabled="@(!editSuccess)">
            Salvează
        </MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="showDeleteDialog" 
           Options="dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Confirmare ștergere</MudText>
    </TitleContent>
    <DialogContent>
        <MudText>Sigur doriți să ștergeți această înregistrare?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => showDeleteDialog = false)">Anulează</MudButton>
        <MudButton Color="Color.Error" OnClick="ConfirmDelete">Șterge</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<MoodEntry>? entries;
    private MoodEntry? selectedEntry;
    private MoodEntry newEntry = new();
    private MoodEntry editingEntry = new();
    private MoodEntry? deletingEntry;
    private bool isLoading = true;
    private string? errorMessage;
    private bool showAddDialog;
    private bool showEditDialog;
    private bool showDeleteDialog;
    private string searchString = "";
    private MudForm? form;
    private bool success;
    private MudForm? editForm;
    private bool editSuccess;
    private DialogOptions dialogOptions = new() { CloseButton = true, MaxWidth = MaxWidth.Small };

    protected override async Task OnInitializedAsync()
    {
        await LoadEntries();
    }

    private async Task LoadEntries()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (!user.Identity?.IsAuthenticated ?? true)
            {
                errorMessage = "Nu sunteți autentificat. Vă rugăm să vă autentificați pentru a vedea înregistrările.";
                return;
            }
            
            var userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "Nu s-a putut identifica utilizatorul. Vă rugăm să vă autentificați din nou.";
                return;
            }
            
            var response = await Http.GetAsync($"api/MoodEntries?userId={userId}");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                entries = System.Text.Json.JsonSerializer.Deserialize<List<MoodEntry>>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            }
            else
            {
                errorMessage = $"Eroare la încărcarea înregistrărilor: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Eroare: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveEntry()
    {
        try
        {
            if (!success)
            {
                Snackbar.Add("Vă rugăm să completați toate câmpurile obligatorii", Severity.Warning);
                return;
            }

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (string.IsNullOrEmpty(userId))
            {
                Snackbar.Add("Nu s-a putut identifica utilizatorul", Severity.Error);
                return;
            }
            
            newEntry.UserId = userId;
            
            var response = await Http.PostAsJsonAsync("api/MoodEntries", newEntry);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Înregistrarea a fost adăugată cu succes", Severity.Success);
                showAddDialog = false;
                newEntry = new();
                await LoadEntries();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Eroare la salvarea înregistrării: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare: {ex.Message}", Severity.Error);
        }
    }

    private void EditEntry(MoodEntry entry)
    {
        editingEntry = new MoodEntry
        {
            Id = entry.Id,
            UserId = entry.UserId,
            Date = entry.Date,
            MoodLevel = entry.MoodLevel,
            Activities = entry.Activities,
            Triggers = entry.Triggers,
            SleepHours = entry.SleepHours
        };
        showEditDialog = true;
    }

    private async Task UpdateEntry()
    {
        try
        {
            if (!editSuccess)
            {
                Snackbar.Add("Vă rugăm să completați toate câmpurile obligatorii", Severity.Warning);
                return;
            }

            var response = await Http.PutAsJsonAsync($"api/MoodEntries/{editingEntry.Id}", editingEntry);
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Înregistrarea a fost actualizată cu succes", Severity.Success);
                showEditDialog = false;
                await LoadEntries();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Eroare la actualizarea înregistrării: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare: {ex.Message}", Severity.Error);
        }
    }

    private void DeleteEntry(MoodEntry entry)
    {
        deletingEntry = entry;
        showDeleteDialog = true;
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (deletingEntry == null) return;
            
            var response = await Http.DeleteAsync($"api/MoodEntries/{deletingEntry.Id}");
            
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Înregistrarea a fost ștearsă cu succes", Severity.Success);
                showDeleteDialog = false;
                await LoadEntries();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Eroare la ștergerea înregistrării: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Eroare: {ex.Message}", Severity.Error);
        }
    }

    private bool FilterFunc(MoodEntry entry)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return entry.Date.ToString("dd.MM.yyyy").Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || entry.MoodLevel.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || (entry.Activities?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (entry.Triggers?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (entry.SleepHours?.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private string GetMoodIcon(int moodLevel)
    {
        return moodLevel switch
        {
            <= 3 => Icons.Material.Filled.SentimentVeryDissatisfied,
            <= 5 => Icons.Material.Filled.SentimentDissatisfied,
            <= 7 => Icons.Material.Filled.SentimentSatisfied,
            _ => Icons.Material.Filled.SentimentVerySatisfied
        };
    }

    private Color GetMoodColor(int moodLevel)
    {
        return moodLevel switch
        {
            <= 3 => Color.Error,
            <= 5 => Color.Warning,
            <= 7 => Color.Info,
            _ => Color.Success
        };
    }

    private string GetRowClass(MoodEntry entry)
    {
        return entry.MoodLevel switch
        {
            <= 3 => "mud-error",
            <= 5 => "mud-warning",
            _ => "mud-success"
        };
    }
}


