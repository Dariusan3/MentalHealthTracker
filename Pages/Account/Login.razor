@page "/account/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using MentalHealthTracker.Models
@using MudBlazor
@using System.Net.Http.Json
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Mental Health Tracker - Autentificare</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex justify-center align-center" Style="height: 80vh;">
    <MudCard Elevation="3" Class="rounded-lg pa-4" Style="width: 100%;">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">Autentificare</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mb-4" Variant="Variant.Filled">@errorMessage</MudAlert>
            }
            
            <EditForm Model="@loginRequest" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="loginRequest.Email" 
                                     Label="Email" 
                                     Variant="Variant.Outlined" 
                                     InputType="InputType.Email"
                                     Required="true" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="loginRequest.Password" 
                                     Label="Parolă" 
                                     Variant="Variant.Outlined" 
                                     InputType="@passwordInputType"
                                     Adornment="Adornment.End" 
                                     AdornmentIcon="@passwordIcon" 
                                     OnAdornmentClick="TogglePasswordVisibility"
                                     Required="true" />
                    </MudItem>
                    <MudItem xs="12">
                        <div class="d-flex justify-space-between align-center">
                            <MudCheckBox @bind-Value="loginRequest.RememberMe" Label="Ține-mă minte" Color="Color.Primary" />
                        </div>
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton ButtonType="ButtonType.Submit" 
                                  Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  Size="Size.Large"
                                  FullWidth="true"
                                  Disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Se procesează...</MudText>
                            }
                            else
                            {
                                <MudText>Autentificare</MudText>
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-center pb-4 flex-column">
            <MudText Align="Align.Center" Class="mb-2">Nu ai cont?</MudText>
            <a href="/account/register" class="mud-button-root mud-button mud-button-outlined mud-button-outlined-secondary mud-button-filled-size-medium mud-ripple mud-width-full">
                <span class="mud-button-label">Înregistrează-te</span>
            </a>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    private LoginRequest loginRequest = new LoginRequest();
    private bool isProcessing = false;
    private string? errorMessage;
    
    private bool isPasswordVisible = false;
    private InputType passwordInputType => isPasswordVisible ? InputType.Text : InputType.Password;
    private string passwordIcon => isPasswordVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
    
    protected override void OnInitialized()
    {
        // Obținem parametrul returnUrl din query string, dacă există
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var returnUrlValues))
        {
            // Păstrăm returnUrl pentru redirecționare
        }
    }
    
    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }
    
    private async Task HandleSubmit()
    {
        if (isProcessing)
            return;
            
        isProcessing = true;
        errorMessage = null;
        
        try
        {
            Console.WriteLine($"Încercare de autentificare pentru {loginRequest.Email}");
            var response = await Http.PostAsJsonAsync("api/account/login", loginRequest);
            Console.WriteLine($"Răspuns autentificare: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null && result.Success)
                {
                    // Adăugăm un mesaj de diagnosticare
                    errorMessage = "Autentificare reușită! Redirecționare...";
                    Console.WriteLine($"Autentificare reușită pentru {loginRequest.Email}");
                    Console.WriteLine($"UserId: {result.UserId}, UserName: {result.UserName}");
                    StateHasChanged();
                    
                    try
                    {
                        // Încercăm să folosim funcțiile din authHelpers
                        await JSRuntime.InvokeVoidAsync("eval", $@"
                            console.log('Salvare stare autentificare...');
                            if (window.authHelpers && window.authHelpers.saveAuthState) {{
                                window.authHelpers.saveAuthState(true, '{result.UserId}', '{result.UserName}');
                                console.log('Stare salvată cu succes!');
                            }} else {{
                                console.error('authHelpers.saveAuthState nu este disponibil!');
                                // Salvăm direct în localStorage ca fallback
                                localStorage.setItem('isAuthenticated', 'true');
                                localStorage.setItem('userId', '{result.UserId}');
                                localStorage.setItem('userName', '{result.UserName}');
                            }}
                            
                            // Setăm flag-ul de autentificare reușită
                            sessionStorage.setItem('login_success', 'true');
                        ");
                        
                        // Verificăm starea de autentificare
                        await JSRuntime.InvokeVoidAsync("checkAuthStatus");
                        
                        // Așteptăm puțin pentru a permite setarea cookie-urilor
                        await Task.Delay(1000);
                        
                        // Redirecționăm către pagina principală cu forțarea reîncărcării
                        NavigationManager.NavigateTo("/", true);
                    }
                    catch (Exception ex)
                    {
                        // Dacă apelul JavaScript eșuează, folosim doar redirecționarea
                        errorMessage = $"Eroare JavaScript: {ex.Message}. Se redirecționează...";
                        Console.WriteLine($"Eroare JavaScript: {ex.Message}");
                        StateHasChanged();
                        await Task.Delay(1000);
                        NavigationManager.NavigateTo("/", true);
                    }
                    return;
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Eroare autentificare: {errorContent}");
                
                try
                {
                    var errorResult = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    errorMessage = errorResult?.Message ?? "Eroare la autentificare. Te rugăm să încerci din nou.";
                }
                catch
                {
                    errorMessage = $"Eroare la autentificare: {response.StatusCode}";
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Eroare la autentificare: {ex.Message}";
            Console.WriteLine($"Excepție la autentificare: {ex.Message}");
        }
        
        isProcessing = false;
        StateHasChanged();
    }
    
    private class LoginRequest
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
        public bool RememberMe { get; set; }
    }
    
    private class LoginResponse
    {
        public bool Success { get; set; }
        public string RedirectUrl { get; set; } = "/";
        public string UserId { get; set; } = "";
        public string UserName { get; set; } = "";
    }
    
    private class ErrorResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
    }
} 